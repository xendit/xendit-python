"""
    Payment Method Service v2

    This API is used for Payment Method Service v2  # noqa: E501

    The version of the OpenAPI document: 2.87.2
"""

import re  # noqa: F401
import sys  # noqa: F401

from xendit.api_client import ApiClient, Endpoint as _Endpoint
from xendit.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)

from xendit.payment_method.model import *  # noqa: F401,E501

class PaymentMethodApi(object):
    """NOTE: This class is auto generated by the OpenAPI Generator.
    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.auth_payment_method_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethod,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}/auth',
                'operation_id': 'auth_payment_method',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                    'payment_method_auth_parameters',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                    'payment_method_auth_parameters':
                        (PaymentMethodAuthParameters,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                },
                'location_map': {
                    'payment_method_id': 'path',
                    'payment_method_auth_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_payment_method_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethod,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods',
                'operation_id': 'create_payment_method',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_parameters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_parameters':
                        (PaymentMethodParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_method_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.expire_payment_method_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethod,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}/expire',
                'operation_id': 'expire_payment_method',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                    'payment_method_expire_parameters',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                    'payment_method_expire_parameters',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                    'payment_method_expire_parameters':
                        (PaymentMethodExpireParameters,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                },
                'location_map': {
                    'payment_method_id': 'path',
                    'payment_method_expire_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_all_payment_channels_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentChannelList,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/channels',
                'operation_id': 'get_all_payment_channels',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'is_activated',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'is_activated',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('is_activated',): {

                        "TRUE": True,
                        "FALSE": False
                    },
                },
                'openapi_types': {
                    'is_activated':
                        (bool,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'is_activated': 'is_activated',
                    'type': 'type',
                },
                'location_map': {
                    'is_activated': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_all_payment_methods_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethodList,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods',
                'operation_id': 'get_all_payment_methods',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'type',
                    'status',
                    'reusability',
                    'customer_id',
                    'reference_id',
                    'after_id',
                    'before_id',
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        ([str],),
                    'type':
                        ([str],),
                    'status':
                        ([PaymentMethodStatus],),
                    'reusability':
                        (PaymentMethodReusability,),
                    'customer_id':
                        (str,),
                    'reference_id':
                        (str,),
                    'after_id':
                        (str,),
                    'before_id':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'type': 'type',
                    'status': 'status',
                    'reusability': 'reusability',
                    'customer_id': 'customer_id',
                    'reference_id': 'reference_id',
                    'after_id': 'after_id',
                    'before_id': 'before_id',
                    'limit': 'limit',
                },
                'location_map': {
                    'id': 'query',
                    'type': 'query',
                    'status': 'query',
                    'reusability': 'query',
                    'customer_id': 'query',
                    'reference_id': 'query',
                    'after_id': 'query',
                    'before_id': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'type': 'multi',
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_payment_method_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethod,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}',
                'operation_id': 'get_payment_method_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                },
                'location_map': {
                    'payment_method_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_payments_by_payment_method_id_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}/payments',
                'operation_id': 'get_payments_by_payment_method_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                    'payment_request_id',
                    'payment_method_id2',
                    'reference_id',
                    'payment_method_type',
                    'channel_code',
                    'status',
                    'currency',
                    'created_gte',
                    'created_lte',
                    'updated_gte',
                    'updated_lte',
                    'limit',
                    'after_id',
                    'before_id',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                    'payment_request_id':
                        ([str],),
                    'payment_method_id2':
                        ([str],),
                    'reference_id':
                        ([str],),
                    'payment_method_type':
                        ([PaymentMethodType],),
                    'channel_code':
                        ([str],),
                    'status':
                        ([str],),
                    'currency':
                        ([str],),
                    'created_gte':
                        (datetime,),
                    'created_lte':
                        (datetime,),
                    'updated_gte':
                        (datetime,),
                    'updated_lte':
                        (datetime,),
                    'limit':
                        (int,),
                    'after_id':
                        (str,),
                    'before_id':
                        (str,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                    'payment_request_id': 'payment_request_id',
                    'payment_method_id2': 'payment_method_id',
                    'reference_id': 'reference_id',
                    'payment_method_type': 'payment_method_type',
                    'channel_code': 'channel_code',
                    'status': 'status',
                    'currency': 'currency',
                    'created_gte': 'created[gte]',
                    'created_lte': 'created[lte]',
                    'updated_gte': 'updated[gte]',
                    'updated_lte': 'updated[lte]',
                    'limit': 'limit',
                    'after_id': 'after_id',
                    'before_id': 'before_id',
                },
                'location_map': {
                    'payment_method_id': 'path',
                    'payment_request_id': 'query',
                    'payment_method_id2': 'query',
                    'reference_id': 'query',
                    'payment_method_type': 'query',
                    'channel_code': 'query',
                    'status': 'query',
                    'currency': 'query',
                    'created_gte': 'query',
                    'created_lte': 'query',
                    'updated_gte': 'query',
                    'updated_lte': 'query',
                    'limit': 'query',
                    'after_id': 'query',
                    'before_id': 'query',
                },
                'collection_format_map': {
                    'payment_request_id': 'multi',
                    'payment_method_id2': 'multi',
                    'reference_id': 'multi',
                    'payment_method_type': 'multi',
                    'channel_code': 'multi',
                    'status': 'multi',
                    'currency': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_payment_method_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentMethod,),
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}',
                'operation_id': 'patch_payment_method',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                    'payment_method_update_parameters',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                    'payment_method_update_parameters':
                        (PaymentMethodUpdateParameters,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                },
                'location_map': {
                    'payment_method_id': 'path',
                    'payment_method_update_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.simulate_payment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/payment_methods/{paymentMethodId}/payments/simulate',
                'operation_id': 'simulate_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_method_id',
                    'simulate_payment_request',
                ],
                'required': [
                    'payment_method_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_method_id':
                        (str,),
                    'simulate_payment_request':
                        (SimulatePaymentRequest,),
                },
                'attribute_map': {
                    'payment_method_id': 'paymentMethodId',
                },
                'location_map': {
                    'payment_method_id': 'path',
                    'simulate_payment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def auth_payment_method(
        self,
        payment_method_id,
        **kwargs
    ):
        """Validate a payment method's linking OTP  # noqa: E501

        This endpoint validates a payment method linking OTP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_payment_method(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            payment_method_auth_parameters (PaymentMethodAuthParameters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.auth_payment_method_endpoint.call_with_http_info(**kwargs)

    def create_payment_method(
        self,
        **kwargs
    ):
        """Creates payment method  # noqa: E501

        This endpoint initiates creation of payment method  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_method(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            payment_method_parameters (PaymentMethodParameters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_payment_method_endpoint.call_with_http_info(**kwargs)

    def expire_payment_method(
        self,
        payment_method_id,
        **kwargs
    ):
        """Expires a payment method  # noqa: E501

        This endpoint expires a payment method and performs unlinking if necessary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.expire_payment_method(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            payment_method_expire_parameters (PaymentMethodExpireParameters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.expire_payment_method_endpoint.call_with_http_info(**kwargs)

    def get_all_payment_channels(
        self,
        **kwargs
    ):
        """Get all payment channels  # noqa: E501

        Get all payment channels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_payment_channels(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            is_activated (bool): [optional] if omitted the server will use the default value of True
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentChannelList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_all_payment_channels_endpoint.call_with_http_info(**kwargs)

    def get_all_payment_methods(
        self,
        **kwargs
    ):
        """Get all payment methods by filters  # noqa: E501

        Get all payment methods by filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_payment_methods(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            id ([str]): [optional]
            type ([str]): [optional]
            status ([PaymentMethodStatus]): [optional]
            reusability (PaymentMethodReusability): [optional]
            customer_id (str): [optional]
            reference_id (str): [optional]
            after_id (str): [optional]
            before_id (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethodList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_all_payment_methods_endpoint.call_with_http_info(**kwargs)

    def get_payment_method_by_id(
        self,
        payment_method_id,
        **kwargs
    ):
        """Get payment method by ID  # noqa: E501

        Get payment method by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payment_method_by_id(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.get_payment_method_by_id_endpoint.call_with_http_info(**kwargs)

    def get_payments_by_payment_method_id(
        self,
        payment_method_id,
        **kwargs
    ):
        """Returns payments with matching PaymentMethodID.  # noqa: E501

        Returns payments with matching PaymentMethodID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payments_by_payment_method_id(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            payment_request_id ([str]): [optional]
            payment_method_id2 ([str]): [optional]
            reference_id ([str]): [optional]
            payment_method_type ([PaymentMethodType]): [optional]
            channel_code ([str]): [optional]
            status ([str]): [optional]
            currency ([str]): [optional]
            created_gte (datetime): [optional]
            created_lte (datetime): [optional]
            updated_gte (datetime): [optional]
            updated_lte (datetime): [optional]
            limit (int): [optional]
            after_id (str): [optional]
            before_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.get_payments_by_payment_method_id_endpoint.call_with_http_info(**kwargs)

    def patch_payment_method(
        self,
        payment_method_id,
        **kwargs
    ):
        """Patch payment methods  # noqa: E501

        This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_payment_method(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            payment_method_update_parameters (PaymentMethodUpdateParameters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentMethod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.patch_payment_method_endpoint.call_with_http_info(**kwargs)

    def simulate_payment(
        self,
        payment_method_id,
        **kwargs
    ):
        """Makes payment with matching PaymentMethodID.  # noqa: E501

        Makes payment with matching PaymentMethodID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.simulate_payment(payment_method_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_method_id (str):

        Keyword Args:
            simulate_payment_request (SimulatePaymentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_method_id'] = \
            payment_method_id
        return self.simulate_payment_endpoint.call_with_http_info(**kwargs)

